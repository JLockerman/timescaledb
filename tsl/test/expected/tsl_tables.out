-- Copyright (c) 2016-2018  Timescale, Inc. All Rights Reserved.
--
-- This file is licensed under the Timescale License,
-- see LICENSE-TIMESCALE at the top of the tsl directory.
\c single :ROLE_SUPERUSER
SELECT _timescaledb_internal.stop_background_workers();
WARNING:  starting TimescaleDB code that requires the Timescale License
WARNING:  Timescale License expired
 stop_background_workers 
-------------------------
 t
(1 row)

SET timescaledb.license_key='CommunityLicense';
WARNING:  starting TimescaleDB code that requires the Timescale License
CREATE OR REPLACE FUNCTION ts_test_chunk_stats_insert(job_id INTEGER, chunk_id INTEGER, num_times_run INTEGER, last_time_run TIMESTAMPTZ = NULL) RETURNS VOID
AS :TSL_MODULE_PATHNAME LANGUAGE C VOLATILE;
CREATE OR REPLACE FUNCTION delete_job(job_id INTEGER)
RETURNS VOID
AS :TSL_MODULE_PATHNAME, 'ts_test_bgw_job_delete_by_id'
LANGUAGE C VOLATILE STRICT;
\c single :ROLE_DEFAULT_PERM_USER
select * from _timescaledb_config.bgw_policy_drop_chunks;
WARNING:  starting TimescaleDB code that requires the Timescale License
WARNING:  Timescale License expired
 job_id | hypertable_id | older_than | cascade 
--------+---------------+------------+---------
(0 rows)

select * from _timescaledb_config.bgw_policy_recluster;
 job_id | hypertable_id | hypertable_index_name 
--------+---------------+-----------------------
(0 rows)

CREATE TABLE test_table(time timestamptz, junk int);
SELECT create_hypertable('test_table', 'time');
NOTICE:  adding not-null constraint to column "time"
    create_hypertable    
-------------------------
 (1,public,test_table,t)
(1 row)

CREATE INDEX second_index on test_table (time);
CREATE INDEX third_index on test_table (time);
select add_recluster_policy('test_table', 'test_table_time_idx') as job_id \gset
-- Noop for duplicate policy
select add_recluster_policy('test_table', 'test_table_time_idx', true);
NOTICE:  recluster policy already exists on hypertable "test_table", skipping
 add_recluster_policy 
----------------------
                   -1
(1 row)

select add_recluster_policy('test_table', 'second_index', true);
WARNING:  could not add recluster policy due to existing policy on hypertable with different arguments
 add_recluster_policy 
----------------------
                   -1
(1 row)

select add_recluster_policy('test_table', 'third_index', true);
WARNING:  could not add recluster policy due to existing policy on hypertable with different arguments
 add_recluster_policy 
----------------------
                   -1
(1 row)

\set ON_ERROR_STOP 0
-- Error whenever incorrect arguments are applied (must have table and index)
select add_recluster_policy('test_table', 'bad_index');
ERROR:  could not add recluster policy because the provided index is not a valid relation
select add_recluster_policy('test_table', '');
ERROR:  could not add recluster policy because the provided index is not a valid relation
select add_recluster_policy('test_table');
ERROR:  function add_recluster_policy(unknown) does not exist at character 8
select add_recluster_policy('test_table', 'second_index');
ERROR:  recluster policy already exists for hypertable "test_table"
select add_recluster_policy('test_table', 'third_index');
ERROR:  recluster policy already exists for hypertable "test_table"
\set ON_ERROR_STOP 1
select * from _timescaledb_config.bgw_policy_recluster where job_id=:job_id;
 job_id | hypertable_id | hypertable_index_name 
--------+---------------+-----------------------
   1000 |             1 | test_table_time_idx
(1 row)

-- Now check that default scheduling interval for recluster policy is calculated correctly
-- Should be 1/2 default chunk interval length
CREATE TABLE test_table2(time timestamptz, junk int);
SELECT create_hypertable('test_table2', 'time', chunk_time_interval=>INTERVAL '1 day');
NOTICE:  adding not-null constraint to column "time"
    create_hypertable     
--------------------------
 (2,public,test_table2,t)
(1 row)

select add_recluster_policy('test_table2', 'test_table2_time_idx');
 add_recluster_policy 
----------------------
                 1001
(1 row)

select * from _timescaledb_config.bgw_job where job_type IN ('drop_chunks', 'recluster');
  id  |     application_name     | job_type  | schedule_interval | max_runtime | max_retries | retry_period 
------+--------------------------+-----------+-------------------+-------------+-------------+--------------
 1000 | Recluster Background Job | recluster | @ 84 hours        | @ 0         |          -1 | @ 1 day
 1001 | Recluster Background Job | recluster | @ 12 hours        | @ 0         |          -1 | @ 1 day
(2 rows)

DROP TABLE test_table2;
-- Make sure that test_table2 recluster policy gets dropped
select * from _timescaledb_config.bgw_job where job_type IN ('drop_chunks', 'recluster');
  id  |     application_name     | job_type  | schedule_interval | max_runtime | max_retries | retry_period 
------+--------------------------+-----------+-------------------+-------------+-------------+--------------
 1000 | Recluster Background Job | recluster | @ 84 hours        | @ 0         |          -1 | @ 1 day
(1 row)

-- Error whenever incorrect arguments are applied (must have table and interval)
\set ON_ERROR_STOP 0
select add_drop_chunks_policy();
ERROR:  function add_drop_chunks_policy() does not exist at character 8
select add_drop_chunks_policy('test_table');
ERROR:  function add_drop_chunks_policy(unknown) does not exist at character 8
select add_drop_chunks_policy(INTERVAL '3 hours');
ERROR:  function add_drop_chunks_policy(interval) does not exist at character 8
select add_drop_chunks_policy('fake_table', INTERVAL '3 month', true);
ERROR:  relation "fake_table" does not exist at character 31
select add_drop_chunks_policy('fake_table', INTERVAL '3 month');
ERROR:  relation "fake_table" does not exist at character 31
select add_drop_chunks_policy('test_table', cascade=>true);
ERROR:  function add_drop_chunks_policy(unknown, cascade => boolean) does not exist at character 8
\set ON_ERROR_STOP 1
select add_drop_chunks_policy('test_table', INTERVAL '3 month', true);
 add_drop_chunks_policy 
------------------------
                   1002
(1 row)

-- add_*_policy should be noop only for policies with the exact same parameters
select add_drop_chunks_policy('test_table', INTERVAL '3 month', true, true);
NOTICE:  drop chunks policy already exists on hypertable "test_table", skipping
 add_drop_chunks_policy 
------------------------
                     -1
(1 row)

-- Should not add new policy with different parameters
select add_drop_chunks_policy('test_table', INTERVAL '3 month', false, true);
WARNING:  could not add drop_chunks policy due to existing policy on hypertable with different arguments
 add_drop_chunks_policy 
------------------------
                     -1
(1 row)

select add_drop_chunks_policy('test_table', INTERVAL '1 year', if_not_exists => true);
WARNING:  could not add drop_chunks policy due to existing policy on hypertable with different arguments
 add_drop_chunks_policy 
------------------------
                     -1
(1 row)

select add_drop_chunks_policy('test_table', INTERVAL '3 days', if_not_exists => true);
WARNING:  could not add drop_chunks policy due to existing policy on hypertable with different arguments
 add_drop_chunks_policy 
------------------------
                     -1
(1 row)

select add_drop_chunks_policy('test_table', INTERVAL '3 days', true, if_not_exists => true);
WARNING:  could not add drop_chunks policy due to existing policy on hypertable with different arguments
 add_drop_chunks_policy 
------------------------
                     -1
(1 row)

\set ON_ERROR_STOP 0
select add_drop_chunks_policy('test_table', INTERVAL '3 month', false);
ERROR:  drop chunks policy already exists for hypertable "test_table"
select add_drop_chunks_policy('test_table', INTERVAL '1 year');
ERROR:  drop chunks policy already exists for hypertable "test_table"
select add_drop_chunks_policy('test_table', INTERVAL '3 days');
ERROR:  drop chunks policy already exists for hypertable "test_table"
select add_drop_chunks_policy('test_table', INTERVAL '3 days', true);
ERROR:  drop chunks policy already exists for hypertable "test_table"
\set ON_ERROR_STOP 1
select * from _timescaledb_config.bgw_policy_drop_chunks;
 job_id | hypertable_id | older_than | cascade 
--------+---------------+------------+---------
   1002 |             1 | @ 3 mons   | t
(1 row)

select r.job_id,r.hypertable_id,r.older_than,r.cascade from _timescaledb_config.bgw_policy_drop_chunks as r, _timescaledb_catalog.hypertable as h where r.hypertable_id=h.id and h.table_name='test_table';
 job_id | hypertable_id | older_than | cascade 
--------+---------------+------------+---------
   1002 |             1 | @ 3 mons   | t
(1 row)

select remove_drop_chunks_policy('test_table');
 remove_drop_chunks_policy 
---------------------------
 
(1 row)

select * from _timescaledb_config.bgw_policy_drop_chunks;
 job_id | hypertable_id | older_than | cascade 
--------+---------------+------------+---------
(0 rows)

select r.job_id,r.hypertable_id,r.older_than,r.cascade from _timescaledb_config.bgw_policy_drop_chunks as r, _timescaledb_catalog.hypertable as h where r.hypertable_id=h.id and h.table_name='test_table';
 job_id | hypertable_id | older_than | cascade 
--------+---------------+------------+---------
(0 rows)

select remove_recluster_policy('test_table');
 remove_recluster_policy 
-------------------------
 
(1 row)

select * from _timescaledb_config.bgw_policy_recluster;
 job_id | hypertable_id | hypertable_index_name 
--------+---------------+-----------------------
(0 rows)

select r.job_id,r.hypertable_id,r.hypertable_index_name from _timescaledb_config.bgw_policy_recluster as r, _timescaledb_catalog.hypertable as h where r.hypertable_id=h.id and h.table_name='test_table';
 job_id | hypertable_id | hypertable_index_name 
--------+---------------+-----------------------
(0 rows)

select add_drop_chunks_policy('test_table', INTERVAL '3 month');
 add_drop_chunks_policy 
------------------------
                   1003
(1 row)

select * from _timescaledb_config.bgw_policy_drop_chunks;
 job_id | hypertable_id | older_than | cascade 
--------+---------------+------------+---------
   1003 |             1 | @ 3 mons   | t
(1 row)

select remove_drop_chunks_policy('test_table');
 remove_drop_chunks_policy 
---------------------------
 
(1 row)

select * from _timescaledb_config.bgw_policy_drop_chunks;
 job_id | hypertable_id | older_than | cascade 
--------+---------------+------------+---------
(0 rows)

-- Make sure remove works when there's nothing to remove
select remove_drop_chunks_policy('test_table', true);
NOTICE:  drop chunks policy does not exist on hypertable "test_table", skipping
 remove_drop_chunks_policy 
---------------------------
 
(1 row)

select remove_recluster_policy('test_table', true);
NOTICE:  recluster policy does not exist on hypertable "test_table", skipping
 remove_recluster_policy 
-------------------------
 
(1 row)

\set ON_ERROR_STOP 0
select remove_drop_chunks_policy();
ERROR:  function remove_drop_chunks_policy() does not exist at character 8
select remove_drop_chunks_policy('fake_table');
ERROR:  relation "fake_table" does not exist at character 34
select remove_recluster_policy();
ERROR:  function remove_recluster_policy() does not exist at character 8
select remove_recluster_policy('fake_table');
ERROR:  relation "fake_table" does not exist at character 32
\set ON_ERROR_STOP 1
\set ON_ERROR_STOP 0
-- This should be noop
select remove_recluster_policy(2, true);
NOTICE:  recluster policy does not exist on hypertable "(null)", skipping
 remove_recluster_policy 
-------------------------
 
(1 row)

-- Fail with error message
select remove_recluster_policy(2);
ERROR:  could not remove recluster policy, no such policy exists
\set ON_ERROR_STOP 1
-- Now make sure policy args have correct job deletion dependency
select * from _timescaledb_config.bgw_job where job_type IN ('drop_chunks', 'recluster');
 id | application_name | job_type | schedule_interval | max_runtime | max_retries | retry_period 
----+------------------+----------+-------------------+-------------+-------------+--------------
(0 rows)

select add_drop_chunks_policy('test_table', INTERVAL '2 month') as job_id \gset
select add_recluster_policy('test_table', 'third_index') as recluster_job_id \gset
select count(*) from _timescaledb_config.bgw_job where id=:job_id;
 count 
-------
     1
(1 row)

select count(*) from _timescaledb_config.bgw_job where id=:recluster_job_id;
 count 
-------
     1
(1 row)

select count(*) from _timescaledb_config.bgw_policy_drop_chunks where job_id=:job_id;
 count 
-------
     1
(1 row)

select count(*) from _timescaledb_config.bgw_policy_recluster where job_id=:recluster_job_id;
 count 
-------
     1
(1 row)

select delete_job(:job_id);
 delete_job 
------------
 
(1 row)

select count(*) from _timescaledb_config.bgw_job where id=:job_id;
 count 
-------
     0
(1 row)

-- Job args should be gone
select count(*) from _timescaledb_config.bgw_policy_drop_chunks where job_id=:job_id;
 count 
-------
     0
(1 row)

-- Job args should still be there
select count(*) from _timescaledb_config.bgw_policy_recluster where job_id=:recluster_job_id;
 count 
-------
     1
(1 row)

select delete_job(:recluster_job_id);
 delete_job 
------------
 
(1 row)

select count(*) from _timescaledb_config.bgw_job where id=:recluster_job_id;
 count 
-------
     0
(1 row)

-- Job args should be gone
select count(*) from _timescaledb_config.bgw_policy_recluster where job_id=:recluster_job_id;
 count 
-------
     0
(1 row)

-- Now make sure policy args have correct job deletion dependency
select add_drop_chunks_policy('test_table', INTERVAL '2 month') as job_id \gset
select add_recluster_policy('test_table', 'third_index') as recluster_job_id \gset
select count(*) from _timescaledb_config.bgw_job where id=:job_id;
 count 
-------
     1
(1 row)

select count(*) from _timescaledb_config.bgw_job where id=:recluster_job_id;
 count 
-------
     1
(1 row)

select count(*) from _timescaledb_config.bgw_policy_drop_chunks where job_id=:job_id;
 count 
-------
     1
(1 row)

select count(*) from _timescaledb_config.bgw_policy_recluster where job_id=:recluster_job_id;
 count 
-------
     1
(1 row)

select * from _timescaledb_config.bgw_job;
  id  |      application_name      |                job_type                | schedule_interval |   max_runtime   | max_retries | retry_period 
------+----------------------------+----------------------------------------+-------------------+-----------------+-------------+--------------
    1 | Telemetry Reporter         | telemetry_and_version_check_if_enabled | @ 24 hours        | @ 1 min 40 secs |          -1 | @ 1 hour
 1006 | Drop Chunks Background Job | drop_chunks                            | @ 1 day           | @ 5 mins        |          -1 | @ 12 hours
 1007 | Recluster Background Job   | recluster                              | @ 84 hours        | @ 0             |          -1 | @ 1 day
(3 rows)

DROP TABLE test_table;
select count(*) from _timescaledb_config.bgw_job where id=:job_id;
 count 
-------
     0
(1 row)

select count(*) from _timescaledb_config.bgw_job where id=:recluster_job_id;
 count 
-------
     0
(1 row)

select count(*) from _timescaledb_config.bgw_policy_drop_chunks where job_id=:job_id;
 count 
-------
     0
(1 row)

select count(*) from _timescaledb_config.bgw_policy_recluster where job_id=:recluster_job_id;
 count 
-------
     0
(1 row)

-- Check that we can't add policies on non-hypertables
CREATE TABLE non_hypertable(junk int, more_junk int);
CREATE INDEX non_ht_index on non_hypertable(junk);
\set ON_ERROR_STOP 0
select add_drop_chunks_policy('non_hypertable', INTERVAL '2 month');
ERROR:  could not add drop_chunks policy because "non_hypertable" is not a hypertable
select add_recluster_policy('non_hypertable', 'non_ht_index');
ERROR:  could not add recluster policy because "non_hypertable" is not a hypertable
\set ON_ERROR_STOP 1
-- Now make sure things work with multiple policies on multiple hypertables
CREATE TABLE test_table(time timestamptz, junk int);
SELECT create_hypertable('test_table', 'time');
NOTICE:  adding not-null constraint to column "time"
    create_hypertable    
-------------------------
 (3,public,test_table,t)
(1 row)

CREATE INDEX second_index on test_table (time);
CREATE TABLE test_table2(time timestamptz, junk int);
SELECT create_hypertable('test_table2', 'time');
NOTICE:  adding not-null constraint to column "time"
    create_hypertable     
--------------------------
 (4,public,test_table2,t)
(1 row)

CREATE INDEX junk_index on test_table2 (junk);
select add_drop_chunks_policy('test_table', INTERVAL '2 days');
 add_drop_chunks_policy 
------------------------
                   1008
(1 row)

select add_drop_chunks_policy('test_table2', INTERVAL '1 days');
 add_drop_chunks_policy 
------------------------
                   1009
(1 row)

select * from _timescaledb_config.bgw_job where job_type IN ('drop_chunks');
  id  |      application_name      |  job_type   | schedule_interval | max_runtime | max_retries | retry_period 
------+----------------------------+-------------+-------------------+-------------+-------------+--------------
 1008 | Drop Chunks Background Job | drop_chunks | @ 1 day           | @ 5 mins    |          -1 | @ 12 hours
 1009 | Drop Chunks Background Job | drop_chunks | @ 1 day           | @ 5 mins    |          -1 | @ 12 hours
(2 rows)

select * from _timescaledb_config.bgw_policy_drop_chunks;
 job_id | hypertable_id | older_than | cascade 
--------+---------------+------------+---------
   1008 |             3 | @ 2 days   | t
   1009 |             4 | @ 1 day    | t
(2 rows)

DROP TABLE test_table;
select * from _timescaledb_config.bgw_job where job_type IN ('drop_chunks');
  id  |      application_name      |  job_type   | schedule_interval | max_runtime | max_retries | retry_period 
------+----------------------------+-------------+-------------------+-------------+-------------+--------------
 1009 | Drop Chunks Background Job | drop_chunks | @ 1 day           | @ 5 mins    |          -1 | @ 12 hours
(1 row)

select * from _timescaledb_config.bgw_policy_drop_chunks;
 job_id | hypertable_id | older_than | cascade 
--------+---------------+------------+---------
   1009 |             4 | @ 1 day    | t
(1 row)

DROP TABLE test_table2;
select * from _timescaledb_config.bgw_job where job_type IN ('drop_chunks');
 id | application_name | job_type | schedule_interval | max_runtime | max_retries | retry_period 
----+------------------+----------+-------------------+-------------+-------------+--------------
(0 rows)

select * from _timescaledb_config.bgw_policy_drop_chunks;
 job_id | hypertable_id | older_than | cascade 
--------+---------------+------------+---------
(0 rows)

-- Now test chunk_stat insertion
select ts_test_chunk_stats_insert(123, 123, 45);
 ts_test_chunk_stats_insert 
----------------------------
 
(1 row)

select job_id,chunk_id,num_times_job_run from _timescaledb_internal.bgw_policy_chunk_stats;
 job_id | chunk_id | num_times_job_run 
--------+----------+-------------------
    123 |      123 |                45
(1 row)

\c single :ROLE_SUPERUSER
TRUNCATE _timescaledb_internal.bgw_policy_chunk_stats;
WARNING:  starting TimescaleDB code that requires the Timescale License
WARNING:  Timescale License expired
\c single :ROLE_DEFAULT_PERM_USER
-- Now test chunk_stat cascade deletion is correct
select job_id,chunk_id,num_times_job_run from _timescaledb_internal.bgw_policy_chunk_stats;
WARNING:  starting TimescaleDB code that requires the Timescale License
WARNING:  Timescale License expired
 job_id | chunk_id | num_times_job_run 
--------+----------+-------------------
(0 rows)

CREATE TABLE test_table(time timestamptz, junk int);
SELECT create_hypertable('test_table', 'time');
NOTICE:  adding not-null constraint to column "time"
    create_hypertable    
-------------------------
 (5,public,test_table,t)
(1 row)

CREATE INDEX second_index on test_table (time);
insert into test_table values (now(), 1);
insert into test_table values (now() - INTERVAL '5 weeks', 123);
select c.id from _timescaledb_catalog.chunk as c, _timescaledb_catalog.hypertable as h where c.hypertable_id=h.id and h.table_name='test_table';
 id 
----
  1
  2
(2 rows)

select c.id as chunk_id from _timescaledb_catalog.chunk as c, _timescaledb_catalog.hypertable as h where c.hypertable_id=h.id and h.table_name='test_table' LIMIT 1 \gset
select add_recluster_policy('test_table', 'second_index') as job_id \gset
-- Simulate recluster job running and setting this stat row
select ts_test_chunk_stats_insert(:job_id, :chunk_id, 1);
 ts_test_chunk_stats_insert 
----------------------------
 
(1 row)

select job_id,chunk_id,num_times_job_run from _timescaledb_internal.bgw_policy_chunk_stats;
 job_id | chunk_id | num_times_job_run 
--------+----------+-------------------
   1010 |        1 |                 1
(1 row)

select * from _timescaledb_config.bgw_job where job_type='recluster';
  id  |     application_name     | job_type  | schedule_interval | max_runtime | max_retries | retry_period 
------+--------------------------+-----------+-------------------+-------------+-------------+--------------
 1010 | Recluster Background Job | recluster | @ 84 hours        | @ 0         |          -1 | @ 1 day
(1 row)

-- Deleting a chunk that has nothing to do with the job should do nothing
select c.table_name as other_chunk_name,c.schema_name as other_chunk_schema from _timescaledb_catalog.chunk as c, _timescaledb_catalog.hypertable as h where c.id != :chunk_id \gset
select concat(:'other_chunk_schema','.',:'other_chunk_name') as other_chunk \gset
DROP TABLE :other_chunk;
select job_id,chunk_id,num_times_job_run from _timescaledb_internal.bgw_policy_chunk_stats;
 job_id | chunk_id | num_times_job_run 
--------+----------+-------------------
   1010 |        1 |                 1
(1 row)

select * from _timescaledb_config.bgw_job where job_type='recluster';
  id  |     application_name     | job_type  | schedule_interval | max_runtime | max_retries | retry_period 
------+--------------------------+-----------+-------------------+-------------+-------------+--------------
 1010 | Recluster Background Job | recluster | @ 84 hours        | @ 0         |          -1 | @ 1 day
(1 row)

-- Dropping the hypertable should drop the chunk, which should drop the recluster policy
DROP TABLE test_table;
select job_id,chunk_id,num_times_job_run from _timescaledb_internal.bgw_policy_chunk_stats;
 job_id | chunk_id | num_times_job_run 
--------+----------+-------------------
(0 rows)

select * from _timescaledb_config.bgw_job where job_type='recluster';
 id | application_name | job_type | schedule_interval | max_runtime | max_retries | retry_period 
----+------------------+----------+-------------------+-------------+-------------+--------------
(0 rows)

-- Now check dropping a job will drop the chunk_stat row
CREATE TABLE test_table(time timestamptz, junk int);
SELECT create_hypertable('test_table', 'time');
NOTICE:  adding not-null constraint to column "time"
    create_hypertable    
-------------------------
 (6,public,test_table,t)
(1 row)

select add_recluster_policy('test_table', 'test_table_time_idx') as job_id \gset
select add_drop_chunks_policy('test_table', INTERVAL '2 days', true);
 add_drop_chunks_policy 
------------------------
                   1012
(1 row)

select ts_test_chunk_stats_insert(:job_id, 123, 1);
 ts_test_chunk_stats_insert 
----------------------------
 
(1 row)

select job_id,chunk_id,num_times_job_run from _timescaledb_internal.bgw_policy_chunk_stats;
 job_id | chunk_id | num_times_job_run 
--------+----------+-------------------
   1011 |      123 |                 1
(1 row)

select * from _timescaledb_config.bgw_job where job_type in ('drop_chunks', 'recluster');
  id  |      application_name      |  job_type   | schedule_interval | max_runtime | max_retries | retry_period 
------+----------------------------+-------------+-------------------+-------------+-------------+--------------
 1011 | Recluster Background Job   | recluster   | @ 84 hours        | @ 0         |          -1 | @ 1 day
 1012 | Drop Chunks Background Job | drop_chunks | @ 1 day           | @ 5 mins    |          -1 | @ 12 hours
(2 rows)

-- Dropping the drop_chunks job should not affect the chunk_stats row
select remove_drop_chunks_policy('test_table');
 remove_drop_chunks_policy 
---------------------------
 
(1 row)

select job_id,chunk_id,num_times_job_run from _timescaledb_internal.bgw_policy_chunk_stats;
 job_id | chunk_id | num_times_job_run 
--------+----------+-------------------
   1011 |      123 |                 1
(1 row)

select * from _timescaledb_config.bgw_job where job_type in ('drop_chunks', 'recluster');
  id  |     application_name     | job_type  | schedule_interval | max_runtime | max_retries | retry_period 
------+--------------------------+-----------+-------------------+-------------+-------------+--------------
 1011 | Recluster Background Job | recluster | @ 84 hours        | @ 0         |          -1 | @ 1 day
(1 row)

select remove_recluster_policy('test_table');
 remove_recluster_policy 
-------------------------
 
(1 row)

-- Row should be gone
select job_id,chunk_id,num_times_job_run from _timescaledb_internal.bgw_policy_chunk_stats;
 job_id | chunk_id | num_times_job_run 
--------+----------+-------------------
(0 rows)

select * from _timescaledb_config.bgw_job where job_type in ('drop_chunks', 'recluster');
 id | application_name | job_type | schedule_interval | max_runtime | max_retries | retry_period 
----+------------------+----------+-------------------+-------------+-------------+--------------
(0 rows)

