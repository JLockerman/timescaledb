-- Copyright (c) 2016-2018  Timescale, Inc. All Rights Reserved.
--
-- This file is licensed under the Timescale License,
-- see LICENSE-TIMESCALE at the top of the tsl directory.
-- simple example
EXPLAIN (COSTS OFF)
  SELECT
    time_bucket_gapfill('5m',time,now(),now()),
    avg(c2)
  FROM (VALUES (now(),1),(now(),NULL),(now(),NULL)) as t(time,c2)
  GROUP BY 1
  ORDER BY 1;
WARNING:  starting TimescaleDB code that requires the Timescale License
WARNING:  Timescale License expired
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Custom Scan (GapFill)
   ->  GroupAggregate
         Group Key: (public.time_bucket_gapfill('@ 5 mins'::interval, "*VALUES*".column1))
         ->  Sort
               Sort Key: (public.time_bucket_gapfill('@ 5 mins'::interval, "*VALUES*".column1))
               ->  Values Scan on "*VALUES*"
(6 rows)

-- test sorting
EXPLAIN (COSTS OFF)
  SELECT
    time_bucket_gapfill('5m',time,now(),now()),
    avg(c2)
  FROM (VALUES (now(),1),(now(),NULL),(now(),NULL)) as t(time,c2)
  GROUP BY 1
  ORDER BY 2;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: (avg("*VALUES*".column2))
   ->  Custom Scan (GapFill)
         ->  GroupAggregate
               Group Key: (public.time_bucket_gapfill('@ 5 mins'::interval, "*VALUES*".column1))
               ->  Sort
                     Sort Key: (public.time_bucket_gapfill('@ 5 mins'::interval, "*VALUES*".column1))
                     ->  Values Scan on "*VALUES*"
(8 rows)

-- test sort direction
EXPLAIN (COSTS OFF)
  SELECT
    time_bucket_gapfill('5m',time,now(),now()),
    avg(c2)
  FROM (VALUES (now(),1),(now(),NULL),(now(),NULL)) as t(time,c2)
  GROUP BY 1
  ORDER BY 1 DESC;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: (public.time_bucket_gapfill('@ 5 mins'::interval, "*VALUES*".column1)) DESC
   ->  Custom Scan (GapFill)
         ->  Sort
               Sort Key: (public.time_bucket_gapfill('@ 5 mins'::interval, "*VALUES*".column1)) NULLS FIRST
               ->  HashAggregate
                     Group Key: public.time_bucket_gapfill('@ 5 mins'::interval, "*VALUES*".column1)
                     ->  Values Scan on "*VALUES*"
(8 rows)

-- test order by aggregate function
EXPLAIN (COSTS OFF)
  SELECT
    time_bucket_gapfill('5m',time,now(),now()),
    avg(c2)
  FROM (VALUES (now(),1),(now(),NULL),(now(),NULL)) as t(time,c2)
  GROUP BY 1
  ORDER BY 2,1;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: (avg("*VALUES*".column2)), (public.time_bucket_gapfill('@ 5 mins'::interval, "*VALUES*".column1))
   ->  Custom Scan (GapFill)
         ->  GroupAggregate
               Group Key: (public.time_bucket_gapfill('@ 5 mins'::interval, "*VALUES*".column1))
               ->  Sort
                     Sort Key: (public.time_bucket_gapfill('@ 5 mins'::interval, "*VALUES*".column1))
                     ->  Values Scan on "*VALUES*"
(8 rows)

-- test query without order by
EXPLAIN (COSTS OFF)
  SELECT
    time_bucket_gapfill('5m',time,now(),now()),
    avg(c2)
  FROM (VALUES (now(),1),(now(),NULL),(now(),NULL)) as t(time,c2)
  GROUP BY 1;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Custom Scan (GapFill)
   ->  GroupAggregate
         Group Key: (public.time_bucket_gapfill('@ 5 mins'::interval, "*VALUES*".column1))
         ->  Sort
               Sort Key: (public.time_bucket_gapfill('@ 5 mins'::interval, "*VALUES*".column1))
               ->  Values Scan on "*VALUES*"
(6 rows)

